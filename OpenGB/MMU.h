#pragma once

#include <cstdint>
#include <memory>
#include <iostream>

//#define LOGGING

class GameBoy;

class MMU {
	private:
		uint8_t cart[0x8000] = { 0 };
		uint8_t sram[0x2000] = { 0 };
		uint8_t io[0x100] = { 0 };
		uint8_t vram[0x2000] = { 0 };
		uint8_t oam[0x100] = { 0 };
		uint8_t wram[0x2000] = { 0 };
		uint8_t hram[0x80] = { 0 };

		GameBoy *gb = nullptr;

		uint8_t logo[0x30] =
		{
			0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D ,0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
			0x00, 0x08 ,0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
			0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
		};

	public:
		MMU();
		void copy(uint16_t source, uint16_t dest, size_t length);

		uint8_t readByte(uint16_t addr);
		uint16_t readShort(uint16_t addr);

		void writeByte(uint16_t addr, uint8_t data, bool direct = false);
		void writeShort(uint16_t addr, uint16_t data, bool direct = false);

		void set_rom(uint8_t* rom_data);
		void connectGB(GameBoy *g) { gb = g; }
};

